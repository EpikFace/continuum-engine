import { IncrementalEngine } from './engine.js';

const engine = new IncrementalEngine();

/**
 * This method is called for each 'tick' or cycle generated by requestAnimationFrame
 * @param {} dt 
 */
const onTick = (dt) => {
    engine.onTick(dt);
    updateUI();
    window.requestAnimationFrame(onTick);
}

// DOM elements
const statusDiv = document.getElementById("content");
let buttons = {}

function updateUI() {
    let text = "Entities:<br><br>";

    for (let e in engine.entities) {
        let entity = engine.entities[e];
        text += `${e} (${engine.formatNumber(entity.incrementBy)}/${entity.incrementAfter}ms): ${engine.formatNumber(entity.count)} (${entity.count})<br>`;
    }

    statusDiv.innerHTML = text;
}

// start the timer using animation frame
window.onload = function() {
    engine.createEntity("Source Code", 50, 0, 1).setCustomProcessor(function(dt) {
        let incrementBy = (this.incrementBy * Math.trunc((dt-this.lastProcessed)/this.incrementAfter));
        this.count += incrementBy;
        if (this.count > this.maxCount) this.count = this.maxCount;
        console.log(this.count % 5);
        if (this.count % 6 === 0) {
            const bugsEntity = this.engine.entities["Bugs"];
            bugsEntity.count += bugsEntity.incrementBy;
        }
    });
    engine.createEntity("Bugs", 0, 0, 1)
    engine.createEntity("Graphics", 75, 0, 1);
    engine.createEntity("Sound", 150, 0, 1);
    engine.createEntity("Text", 250, 0, 1);
    engine.createEntity("Translations", 650, 0, 0.1).setCustomProcessor(function (dt) {
        let incrementBy = (this.incrementBy * Math.trunc((dt-this.lastProcessed)/this.incrementAfter));
        this.count += incrementBy;
        if (this.count > this.maxCount) this.count = this.maxCount;
    });

    buttons = {
        "formatScientific": document.getElementById("formatScientific"),
        "formatDictionary": document.getElementById("formatDictionary"),
        "formatAbstract": document.getElementById("formatAbstract"),
        "Source Code": {
            "+": document.getElementById("SC+"),
            "-": document.getElementById("SC-")
        },
        "Graphics": {
            "+": document.getElementById("Graphics+"),
            "-": document.getElementById("Graphics-")
        },
        "Sound": {
            "+": document.getElementById("Sound+"),
            "-": document.getElementById("Sound-")
        },
        "Text": {
            "+": document.getElementById("Text+"),
            "-": document.getElementById("Text-")
        },
        "Translations": {
            "+": document.getElementById("Translations+"),
            "-": document.getElementById("Translations-")
        }
    };

    buttons.formatScientific.addEventListener("click", (e) => { engine.setNumberFormatter("scientific") });
    buttons.formatDictionary.addEventListener("click", (e) => { engine.setNumberFormatter("dictionary") });
    buttons.formatAbstract.addEventListener("click", (e) => { engine.setNumberFormatter("abstract") });

    for (let key of ["Source Code", "Graphics", "Sound", "Text", "Translations"]) {
        buttons[key]["+"].addEventListener("click", (e) => {
            const entity = e.target.dataset.entity;
            engine.entities[entity].incrementBy += parseFloat(e.target.dataset.incrementby);
        });
        buttons[key]["-"].addEventListener("click", (e) => {
            const entity = e.target.dataset.entity;
            engine.entities[entity].incrementBy += parseFloat(e.target.dataset.incrementby);
            if ( engine.entities[entity].incrementBy < 0 ) {
                engine.entities[entity].incrementBy = 0;
            }
        });
    }
/*
    buttons["Source Code"]["+"].addEventListener("click", (e) => {
        const entity = e.target.dataset.entity;
        engine.entities[entity].incrementBy+=10;
    });
    buttons["Source Code"]["-"].addEventListener("click", (e) => {
        const entity = e.target.dataset.entity;
        engine.entities[entity].incrementBy--;
        if ( engine.entities[entity].incrementBy < 0 ) {
            engine.entities[entity].incrementBy = 0;
        }
    });
    buttons["Graphics"]["+"].addEventListener("click", (e) => {
        const entity = e.target.dataset.entity;
        engine.entities[entity].incrementBy++;
    });
    buttons["Graphics"]["-"].addEventListener("click", (e) => {
        const entity = e.target.dataset.entity;
        engine.entities[entity].incrementBy--;
        if ( engine.entities[entity].incrementBy < 0 ) {
            engine.entities[entity].incrementBy = 0;
        }
    });
    buttons["Sound"]["+"].addEventListener("click", (e) => {
        const entity = e.target.dataset.entity;
        engine.entities[entity].incrementBy++;
    });
    buttons["Sound"]["-"].addEventListener("click", (e) => {
        const entity = e.target.dataset.entity;
        engine.entities[entity].incrementBy--;
        if ( engine.entities[entity].incrementBy < 0 ) {
            engine.entities[entity].incrementBy = 0;
        }
    });
*/
    console.log("%cIncremental Engine loaded and initialised", "color: blue");
    window.requestAnimationFrame(onTick);
};
